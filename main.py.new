"""
MCP-Sec Gateway - Zero Trust Security Layer for Model Context Protocol
Main entry point for the Flask application
"""
import os
import time
import json
import yaml
from flask import Flask, request, jsonify, render_template_string
from mcp_routes import mcp_bp
from audit_logger import LOG_HISTORY

app = Flask(__name__)
app.register_blueprint(mcp_bp)

@app.route("/healthz")
def health():
    return {"status": "ok"}

@app.route("/")
def root():
    """Root endpoint to check if the service is running"""
    return "MCP-Sec Gateway OK"

@app.route("/logs")
def logs():
    return jsonify(LOG_HISTORY[-100:])

@app.route("/dash")
def dash():
    return render_template_string(
        """<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MCP-Sec Gateway Dashboard</title>
    <link href="https://cdn.replit.com/agent/bootstrap-agent-dark-theme.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <style>
        .risk-high { background-color: #dc3545; color: white; }
        .risk-medium { background-color: #ffc107; color: black; }
        .risk-low { background-color: #198754; color: white; }
    </style>
</head>
<body>
    <div class="container mt-4">
        <header class="mb-4">
            <h1 class="display-4">MCP-Sec Gateway Dashboard</h1>
            <p class="lead">Real-time monitoring of Model Context Protocol traffic</p>
        </header>

        <div class="row">
            <div class="col-md-12">
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Recent Activity Logs</h5>
                        <button id="refreshBtn" class="btn btn-sm btn-outline-secondary">Refresh</button>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>Timestamp</th>
                                        <th>Model ID</th>
                                        <th>Session ID</th>
                                        <th>Tool</th>
                                        <th>Status</th>
                                        <th>Risk Level</th>
                                        <th>Details</th>
                                    </tr>
                                </thead>
                                <tbody id="logsTable">
                                    <!-- Logs will be populated here -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Detail Modal -->
        <div class="modal fade" id="logDetailModal" tabindex="-1" aria-labelledby="logDetailModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="logDetailModalLabel">Log Details</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <pre id="logDetailContent" class="bg-dark text-light p-3 rounded" style="overflow-x: auto;"></pre>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Function to fetch and display logs
        function fetchLogs() {
            fetch('/logs')
                .then(response => response.json())
                .then(data => {
                    const logsTable = document.getElementById('logsTable');
                    logsTable.innerHTML = '';

                    data.forEach((log, index) => {
                        const tr = document.createElement('tr');
                        
                        // Apply row styling based on risk level or status
                        let riskLevel = log.risk_level || 'low';
                        let statusClass = log.status === 'denied' ? 'table-danger' : 
                                         (log.status === 'allowed' ? 'table-success' : '');
                        
                        if (riskLevel === 'high') {
                            tr.classList.add('table-danger');
                        } else if (riskLevel === 'medium') {
                            tr.classList.add('table-warning');
                        } else if (statusClass) {
                            tr.classList.add(statusClass);
                        }

                        // Format timestamp to local time if it exists
                        const timestamp = log.timestamp ? 
                            new Date(log.timestamp).toLocaleString() : 
                            new Date().toLocaleString();
                        
                        tr.innerHTML = `
                            <td>${timestamp}</td>
                            <td>${log.model_id || '-'}</td>
                            <td>${log.session_id || '-'}</td>
                            <td>${log.tool || '-'}</td>
                            <td><span class="badge ${log.status === 'allowed' ? 'bg-success' : 'bg-danger'}">${log.status || '-'}</span></td>
                            <td><span class="badge risk-${riskLevel}">${riskLevel}</span></td>
                            <td>
                                <button class="btn btn-sm btn-outline-info view-details" data-index="${index}">
                                    Details
                                </button>
                            </td>
                        `;
                        logsTable.appendChild(tr);
                    });

                    // Set up event listeners for detail buttons
                    document.querySelectorAll('.view-details').forEach(button => {
                        button.addEventListener('click', function() {
                            const index = this.getAttribute('data-index');
                            const logData = data[index];
                            document.getElementById('logDetailContent').textContent = JSON.stringify(logData, null, 2);
                            document.getElementById('logDetailModalLabel').textContent = `Log Detail: ${logData.tool || 'Unknown'}`;
                            
                            // Show the modal
                            const modal = new bootstrap.Modal(document.getElementById('logDetailModal'));
                            modal.show();
                        });
                    });
                })
                .catch(error => {
                    console.error('Error fetching logs:', error);
                });
        }

        // Initial load
        document.addEventListener('DOMContentLoaded', fetchLogs);

        // Refresh button
        document.getElementById('refreshBtn').addEventListener('click', fetchLogs);

        // Auto-refresh every 15 seconds
        setInterval(fetchLogs, 15000);
    </script>
</body>
</html>
"""
    )

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv('PORT', 8000)), debug=False)